Index: src/logic/Spiel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic;\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\npublic class Spiel {\r\n    private int x=20,y=20;\r\n    // 0 frei, 1 Schiff, 2 Treffer, 3 Wasser\r\n    private int[][][] feld;\r\n    private boolean init=false;\r\n    private boolean started=false;\r\n    private boolean fin=false;\r\n    private boolean versenkt=false;\r\n    public ArrayList<Schiff> schiffe;\r\n    private Random random=new Random();\r\n    private int abschussSpieler =-1;\r\n    private boolean verbose=true;\r\n    //if remote -> both sides are known; !remote -> only your side is known! and you are player 0(1)\r\n    private boolean remote;\r\n    /**\r\n     * make Spiel object\r\n     */\r\n    public Spiel(){\r\n        schiffe=new ArrayList<Schiff>();\r\n    }\r\n\r\n    /**\r\n     * Verbose soll setzen ob prints gemacht werden oder nicht!\r\n     * @param verbose\r\n     */\r\n    public void setVerbose(boolean verbose) {\r\n        this.verbose = verbose;\r\n    }\r\n\r\n    /**\r\n     * make Spiel object\r\n     * remote is set to false\r\n     * @param x horizontal size\r\n     * @param y vertical size\r\n     */\r\n    public Spiel(int x , int y){\r\n        this();\r\n        this.x=x;\r\n        this.y=y;\r\n        this.remote=false;\r\n    }\r\n\r\n    /**\r\n     * make Spiel object\r\n     * @param x horizontal size\r\n     * @param y vertical size\r\n     * @param remote set if both player sides are known or not\r\n     */\r\n    public Spiel(int x,int y,boolean remote){\r\n        this(x,y);\r\n        this.remote=remote;\r\n    }\r\n\r\n    /**\r\n     * @return gibt zurück ob beim letzten erfolgreichen Schuss ein Schiff versunken wurde\r\n     * true -> versenkt, false -> nicht versenkt\r\n     */\r\n    public boolean istVersenkt(){\r\n        return versenkt;\r\n    }\r\n    /**\r\n     * @return true Spiel ist vorbei, false noch nicht!\r\n     */\r\n    public boolean isOver(){\r\n        return fin;\r\n    }\r\n    /**\r\n     * Initialisiert das Spielbrett!\r\n     * Nur 1 mal möglich!\r\n     * @return boolean Erfolgreich oder nicht Erfolgreich\r\n     */\r\n    public boolean init(){\r\n        if(init){\r\n            if(verbose)\r\n                System.err.println(\"Das Spiel wurde bereits Initialisiert erstelle lieber ein NEUES!\");\r\n            return false;\r\n        }\r\n        if(x<1||y<1){\r\n            if(verbose)\r\n                System.err.println(\"Feld eingabe zu klein x: \"+x+\"y: \"+y+\" sollen mindestens 1 sein!\");\r\n            return false;\r\n        }\r\n        feld=new int[2][x][y];\r\n        init=true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This Function just prints the winner.\r\n     * Works only when called right after checkGameOver()==true\r\n     */\r\n    private void gameOver(){\r\n        logicOUTput.printFeld(feld,true);\r\n        System.out.println(\"Der Sieger der Partie ist Spieler \"+((abschussSpieler==0)?\"2(1)\":\"1(0)\"));\r\n    }\r\n    /**\r\n     * checks if a winner is decided\r\n     * @return true if one player has won!\r\n     */\r\n    private boolean checkGameOver(){\r\n        if(!started){\r\n            if(verbose)\r\n                System.err.println(\"Game has not started yet!\");\r\n            return false;\r\n        }\r\n        boolean spieler1TOT=true;\r\n        boolean spieler2TOT=true;\r\n        for(int i=0;i<schiffe.size();i++){\r\n            Schiff s=schiffe.get(i);\r\n            if(spieler1TOT && s.schifflebt==true && s.spieler==0)\r\n                spieler1TOT=false;\r\n            if(spieler2TOT && s.schifflebt==true && s.spieler==1)\r\n                spieler2TOT=false;\r\n            if(!spieler1TOT && !spieler2TOT)\r\n                break;\r\n        }\r\n        if(remote){//you are player 0(1)\r\n            //System.out.println(\"spieler 1 \"+spieler1TOT);\r\n            if (spieler1TOT){\r\n                //System.out.println(\"Spieler 1 Ausgelöscht!\");\r\n                fin=true;\r\n                /*To Do! tell enemy you lost!\r\n                can also be done in GameOVer function or with fin Attribute\r\n                 */\r\n                return true;\r\n            }\r\n        }else if(spieler1TOT || spieler2TOT){\r\n            fin=true;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Possibility for remote host to say he lost\r\n     * @return true if success\r\n     */\r\n    public boolean setGameOver(){\r\n        if(!remote){\r\n            if(verbose)\r\n                System.err.println(\"You can only set GameOver while playing remote!\");\r\n            return false;\r\n        }else if(abschussSpieler==0){\r\n            if(verbose)\r\n                System.err.println(\"Only remote can set GameOver!\");\r\n            return false;\r\n        }else if(!started){\r\n            if(verbose)\r\n                System.err.println(\"Game has not started yet!\");\r\n            return false;\r\n        }\r\n        fin=true;\r\n        gameOver();\r\n        return true;\r\n    }\r\n    /**\r\n     * @return gibt den Spieler der jetzt schießen darf zurück\r\n     */\r\n    public int getAbschussSpieler(){\r\n        return abschussSpieler;\r\n    }\r\n\r\n    /**\r\n     * setzt das Spiel in spiel Zustand.\r\n     * Das heißt ab jetzt kann geschossen werden.\r\n     * Dafür können keine Schiffe mehr hinzugefügt werden!\r\n     * @return true -> das Spiel wurde gestartet, false -> FEHLER!\r\n     */\r\n    public boolean starteSpiel(){\r\n        if(started){\r\n            if(verbose)\r\n                System.err.println(\"Das Spiel ist bereits im Gange!\");\r\n            return false;\r\n        }\r\n        started=true;\r\n        if(abschussSpieler <0){\r\n            abschussSpieler =random.nextInt(2);\r\n            //System.out.println(\"abzuschiesender Spieler ist \"+abschussSpieler);\r\n        }\r\n        if(checkGameOver()){\r\n            gameOver();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * setzt das Spiel in spiel Zustand.\r\n     * Das heißt ab jetzt kann geschossen werden.\r\n     * Dafür können keine Schiffe mehr hinzugefügt werden!\r\n     * @param spieler setzt den Spieler der als erstes angeschossen wird 0 oder 1\r\n     * @return true -> das Spiel wurde gestartet, false -> FEHLER!\r\n     */\r\n    public boolean starteSpiel(int spieler){\r\n        if (!starteSpiel())\r\n            return false;\r\n        abschussSpieler =spieler;\r\n        //System.out.println(\"abzuschiesender Spieler ist \"+abschussSpieler);\r\n        return true;\r\n    }\r\n    /**\r\n     * Schießt auf ein Feld(x|y) auf dem Spielbrett des angegebenen Spielers\r\n     * setzt zudem denn nächsten zu beschiesenden Spieler\r\n     * Nur verwendbar wenn remote==false\r\n     * @param x X Koordinate des Schusses\r\n     * @param y Y Koordinate des Schusses\r\n     * @param spieler der abzuschiesende Spieler\r\n     * @return true -> es wurde geschossen, false -> es wurde nicht geschossen FEHLER!\r\n     */\r\n    public boolean shoot(int x, int y,int spieler){\r\n        if(remote){\r\n            if(verbose)\r\n                System.err.println(\"use other shoot function while playing remote!\");\r\n            return false;\r\n        }\r\n        return abstractShoot(x,y,spieler,0);\r\n    }\r\n\r\n    /**\r\n     * Schießt auf ein Feld(x|y) auf dem Spielbrett des angegebenen Spielers\r\n     * setzt zudem denn nächsten zu beschiesenden Spieler\r\n     * Nur verwendbar wenn remote==true\r\n     * @param x X Koordinate des Schusses\r\n     * @param y Y Koordinate des Schusses\r\n     * @param spieler der abzuschiesende Spieler\r\n     * @param p_hit Value des getroffenen Feldes auf dem Remotefeld 0 frei 1 Schiff 2 getroffen 3 Wasser| wenn man auf Spieler 0 schießt wird diese Eingabe ignoriert!\r\n     * @param p_versenkt true wenn bei Remote ein Schiff versenkt wurde, false wenn bei Remote kein Schiff versenkt wurde\r\n     * @return true -> es wurde geschossen, false -> es wurde nicht geschossen FEHLER!\r\n     */\r\n    public boolean shoot(int x, int y,int spieler,int p_hit,boolean p_versenkt){\r\n        if(!remote){\r\n            if(verbose)\r\n                System.err.println(\"use other shoot function while playing local!\");\r\n            return false;\r\n        }\r\n        boolean ret=abstractShoot(x,y,spieler,p_hit);\r\n        if(ret && spieler==1)\r\n            versenkt=p_versenkt;\r\n        return  ret;\r\n    }\r\n\r\n    /**\r\n     * Hilfsfunktion für die ShootFunktionen\r\n     * @param x\r\n     * @param y\r\n     * @param spieler\r\n     * @param p_hit\r\n     * @return\r\n     */\r\n    private boolean abstractShoot(int x, int y,int spieler,int p_hit){\r\n        if(!started){\r\n            if(verbose)\r\n                System.err.println(\"Game has not started yet!\");\r\n            return false;\r\n        }\r\n        if(fin){\r\n            if(verbose)\r\n                System.err.println(\"Game is Over!\");\r\n            return false;\r\n        }\r\n        if(spieler!=abschussSpieler && p_hit!=31){\r\n            if(verbose)\r\n                System.err.println(\"Wrong Player to shoot!\");\r\n            return false;\r\n        }\r\n\r\n        if(x>=this.x || y >=this.y || x<0 || y<0){\r\n            if(verbose)\r\n                System.err.println(\"Shoot out of boundaries!\");\r\n            return false;\r\n        }\r\n        if(remote && spieler==1 && feld[spieler][x][y]==0)\r\n            feld[spieler][x][y]=p_hit;\r\n        switch (feld[spieler][x][y]){\r\n            default:\r\n                if(verbose)\r\n                    System.err.println(\"undefined feld state\");\r\n                return false;\r\n            case 2: case 3:\r\n                if(verbose)\r\n                    System.err.println(\"Selected Field was already shot\");\r\n                return false;\r\n            case 1://Treffer\r\n                feld[spieler][x][y]=2;\r\n                //find ship and update its getroffen Attribute\r\n                if(!remote || (remote&&spieler==0)){\r\n                    versenkt=false;\r\n                    Schiff s=findSchiffFromPos(x,y,spieler);\r\n                    if(!Schiff.setGetroffenWposAship(x,y,s)){\r\n                        if(verbose)\r\n                            System.err.println(\"Es wurde ein Treffer erzielt, aber es sollte dort kein Schiff sein!\");\r\n                    }\r\n                    if(!s.schifflebt){//Schiff ist versenkt!\r\n                        versenkt=true;\r\n                    }\r\n                }\r\n                break;\r\n            case 0://Wasser oder ehr noch frei\r\n                versenkt=false;\r\n                feld[spieler][x][y]=3;\r\n                if(spieler>0){\r\n                    abschussSpieler=0;\r\n                    //System.out.println(\"abzuschiesender Spieler ist \"+abschussSpieler);\r\n                } else{\r\n                    abschussSpieler=1;\r\n                    //System.out.println(\"abzuschiesender Spieler ist \"+abschussSpieler);\r\n                }\r\n                break;\r\n        }\r\n        //System.out.println(\"Player \"+spieler+\"/\"+abschussSpieler+\" was shot at (\"+x+\"|\"+y+\")\");\r\n        if(checkGameOver()){\r\n            gameOver();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ermöglicht ein Schiff Objekt zu erhalten anhand einer Postion und dem Spieler\r\n     * @param x X Koordinate eines Teiles des Schiffes\r\n     * @param y Y Koordinate eines Teiles des Schiffes\r\n     * @param spieler dem das Schiffzugehöriger Spieler\r\n     * @return das Schiffobjekt wenn erfolgreich ansonsten null\r\n     */\r\n    private Schiff findSchiffFromPos(int x, int y,int spieler){\r\n        int horizontal=2;  //-1 undefined, 0 horizontal, 1 vertical, 2 shipsize=1(both)\r\n        if((x>0 && feld[spieler][x-1][y]==1 )||(x>0 && feld[spieler][x-1][y]==2 )|| (x<this.x-1 && feld[spieler][x+1][y]==1 )|| (x<this.x-1 && feld[spieler][x+1][y]==2 )){\r\n            horizontal=0;\r\n        }else if((y>0 && feld[spieler][x][y-1]==1 )||(y>0 && feld[spieler][x][y-1]==2 )|| (y<this.y-1 && feld[spieler][x][y+1]==1 )|| (y<this.y-1 && feld[spieler][x][y+1]==2 )){\r\n            horizontal=1;\r\n        }\r\n        Schiff s=null;\r\n        switch (horizontal){\r\n            default://both(2) shipsize should be 1\r\n                s=Schiff.getSchiffFromOrigin(x,y,spieler,schiffe);\r\n                break;\r\n            case 0://horizontal\r\n                int xz=x;\r\n                while (xz>=0 && (feld[spieler][xz][y]==1 || feld[spieler][xz][y]==2)){\r\n                    xz--;\r\n                }\r\n                xz++;//xOPos des Schiffes\r\n                s=Schiff.getSchiffFromOrigin(xz,y,spieler,schiffe);\r\n                break;\r\n            case 1://vertical\r\n                int yz=y;\r\n                while (yz>=0 && (feld[spieler][x][yz]==1 || feld[spieler][x][yz]==2)){\r\n                    yz--;\r\n                }\r\n                yz++;//yOPos des Schiffes\r\n                s=Schiff.getSchiffFromOrigin(x,yz,spieler,schiffe);\r\n                break;\r\n        }\r\n        if(s==null){\r\n            if(verbose)\r\n                System.err.println(\"Ship was not found error!\");\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * fügt ein Schiff dem Feld hinzu!\r\n     */\r\n    private void feldAddSchiff(Schiff s){\r\n        for(int i=0;i<s.schifflaenge;i++){\r\n            if(s.horizontal){\r\n                feld[s.spieler][s.xOPos+i][s.yOPos]=(s.getroffen[i]==false)?1:2;\r\n            }else{\r\n                feld[s.spieler][s.xOPos][s.yOPos+i]=(s.getroffen[i]==false)?1:2;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Soll überprüfen ob man das Schiff in das Spiel einfügen darf\r\n     * @param s das zu überprüfende Schiff\r\n     * @return true ist in Ordnung, false illegal!\r\n     */\r\n    private boolean checkLegalSchiff(Schiff s){\r\n        if(s.xOPos<0 || s.xOPos>=x || s.yOPos<0 || s.yOPos>=y || (s.horizontal && s.xOPos+s.schifflaenge>x) || (!s.horizontal && s.yOPos+s.schifflaenge>y))\r\n            return false;\r\n        /*if(s.horizontal){\r\n            for(int i=s.xOPos-1;i<=s.xOPos+s.schifflaenge;i++){\r\n                for(int j=s.yOPos-1;j)\r\n            }\r\n        }*/\r\n        int z=(s.horizontal)?s.xOPos:s.yOPos;\r\n        for(int i=(z-1<0)?0:z-1;i<z+s.schifflaenge+1;i++){\r\n            if(s.horizontal){\r\n                if(i>= this.x)\r\n                    continue;\r\n                for(int y=s.yOPos-1;y<=s.yOPos+1;y++){\r\n                    if(y<0 || y>=this.y)\r\n                        continue;\r\n                    if(feld[s.spieler][i][y]!=0)\r\n                        return false;\r\n                }\r\n            }else {\r\n                if(i>= this.y)\r\n                    continue;\r\n                for(int x=s.xOPos-1;x<=s.xOPos+1;x++){\r\n                    if(x<0 || x>=this.x)\r\n                        continue;\r\n                    if(feld[s.spieler][x][i]!=0)\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Ermöglicht ein Schiff dem Spiel hinzuzufügen.\r\n     * Nach Spielbeginn ist das nicht mehr erlaubt!\r\n     * @param x X Ankerpunkt\r\n     * @param y Y Ankerpunkt\r\n     * @param horizontal true -> das Schiff geht nach rechts weg, false -> das Schiff geht nach unten weg\r\n     * @param len die Länge des Schiffes\r\n     * @param spieler 0 oder 1 (in der Regel) besagt den Spieler dem das Schiff nacher gehört\r\n     * @return true erfolgreich hinzugefügt, false illegal!\r\n     */\r\n    public boolean addShip(int x,int y,boolean horizontal,int len,int spieler){\r\n        if(started){\r\n            if(verbose)\r\n                System.err.println(\"Game has already started!\");\r\n            return false;\r\n        }\r\n        if(remote && spieler==1){\r\n            if(verbose)\r\n                System.err.println(\"You can not set Enemy ships (Remote)\");\r\n        }\r\n        Schiff s=new Schiff();\r\n        s.xOPos=x;\r\n        s.yOPos=y;\r\n        s.horizontal=horizontal;\r\n        s.schifflaenge=len;\r\n        s.spieler=spieler;\r\n        Schiff.initSchiff(s);\r\n        if (checkLegalSchiff(s)){\r\n            schiffe.add(s);\r\n            feldAddSchiff(s);\r\n            return true;\r\n        }else{\r\n            if(verbose)\r\n                System.err.println(\"Illegales Schiff!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Set specific field size later\r\n     * Do this before init! (also noch viel früher als Spielbeginn)\r\n     * @param x horizontal size\r\n     * @param y vertical size\r\n     */\r\n\r\n    public void setSize(int x,int y){\r\n        if (!init){\r\n            this.x=x;\r\n            this.y=y;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Breite des Spielfeldes\r\n     */\r\n    public int getSizeX(){\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * @return gibt das Spielfeld zurück\r\n     */\r\n    public int[][][] getFeld() {\r\n        return feld;\r\n    }\r\n\r\n    /**\r\n     * @return Höhe des Spielfeldes\r\n     */\r\n    public int getSizeY(){\r\n        return y;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/logic/Spiel.java	(revision 42f35fbc29d412e7cda060fa8a89492860c94a94)
+++ src/logic/Spiel.java	(date 1604917275945)
@@ -22,6 +22,7 @@
      * make Spiel object
      */
     public Spiel(){
+
         schiffe=new ArrayList<Schiff>();
     }
 
Index: src/logic/logicOUTput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class logicOUTput {\r\n\r\n\r\n    public static void playagainstRDM_Bot(){\r\n        try {\r\n            BufferedReader inRead = new BufferedReader(new InputStreamReader(System.in));\r\n            System.out.print(\"Feld Breite(x): \");\r\n            String in = inRead.readLine();\r\n            int x = Integer.parseInt(in);\r\n            System.out.print(\"Feld Länge(y): \");\r\n            in = inRead.readLine();\r\n            int y = Integer.parseInt(in);\r\n            //System.out.println(x + \" \" + y);\r\n            Spiel dasSpiel = new Spiel(x, y, true);\r\n            RDM_Bot rdm_bot=new RDM_Bot(x,y);\r\n            dasSpiel.init();\r\n            printFeld(dasSpiel.getFeld(), true);\r\n            int size = 3;\r\n            int count = 1;\r\n            boolean shipAdded = false;\r\n            while (size > 0) {\r\n                System.out.println(\"Add ships cancel/stop with shipsize 0\");\r\n                System.out.print(\"Ship \" + count + \" size: \");\r\n                in = inRead.readLine();\r\n                size = Integer.parseInt(in);\r\n                if (size < 1)\r\n                    break;\r\n                int horizontal = 0;\r\n                shipAdded = false;\r\n                while (!shipAdded) {\r\n                    System.out.print(\"Ship Player 1(0) x: \");\r\n                    in = inRead.readLine();\r\n                    x = Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 1(0) y: \");\r\n                    in = inRead.readLine();\r\n                    y = Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 1(0) horizontal(1 yes 0 no): \");\r\n                    in = inRead.readLine();\r\n                    horizontal = Integer.parseInt(in);\r\n                    shipAdded = dasSpiel.addShip(x, y, (horizontal > 0) ? true : false, size, 0);\r\n                }\r\n\r\n\r\n                count++;\r\n                printFeld(dasSpiel.getFeld(), true);\r\n            }\r\n            printFeld(dasSpiel.getFeld(),true);\r\n            dasSpiel.starteSpiel();\r\n            if(!rdm_bot.shipSizesToAdd(Bot.getShipSizes(dasSpiel.schiffe)))\r\n                return;\r\n            while (!dasSpiel.isOver()){\r\n                int spieler=dasSpiel.getAbschussSpieler();\r\n                System.out.println(\"Spieler \"+(spieler+1)+\" wird nun abgeschossen!\");\r\n                if(spieler==0){\r\n                    int[] xy=rdm_bot.getSchuss();\r\n                    if(!dasSpiel.shoot(xy[0],xy[1],spieler,0,false))\r\n                        return;\r\n                    rdm_bot.setSchussFeld(xy[0],xy[1],spieler,dasSpiel.istVersenkt());\r\n                }else {\r\n                    System.out.print(\"X Koordinate: \");\r\n                    in=inRead.readLine();\r\n                    x=Integer.parseInt(in);\r\n                    System.out.print(\"Y Koordinate: \");\r\n                    in=inRead.readLine();\r\n                    y=Integer.parseInt(in);\r\n                    int ret=rdm_bot.abschiesen(x,y);\r\n                    if(ret<0)\r\n                        return;\r\n                    else if(ret==4){\r\n                        dasSpiel.shoot(x,y,spieler,1,true);\r\n                        System.out.println(\"Treffer Versenkt!\");\r\n                        if(rdm_bot.isFinOver())\r\n                            dasSpiel.setGameOver();\r\n                    }\r\n                    else\r\n                        dasSpiel.shoot(x,y,spieler,ret,false);\r\n                }\r\n\r\n                printFeld(dasSpiel.getFeld(),true);\r\n                /*dasSpiel.shoot(x,y,spieler,(spieler==1&&x==0&&y==0)?1:0,(spieler==1&&x==0&&y==0)?true:false);\r\n                if(spieler==1&&x==0&&y==0)\r\n                    dasSpiel.setGameOver();\r\n                printFeld(dasSpiel.getFeld(),true);\r\n                if(dasSpiel.istVersenkt())\r\n                    System.out.println(\"Treffer Versenkt!\");*/\r\n            }\r\n        }catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"IOEXCEPTION!\");\r\n        }\r\n    }\r\n    /**\r\n     * You can play the game in Cosole both players are humans!\r\n     */\r\n    public static void console2SpielerSpiel()  {\r\n        try {\r\n            BufferedReader inRead = new BufferedReader(new InputStreamReader(System.in));\r\n            System.out.print(\"Feld Breite(x): \");\r\n            String in = inRead.readLine();\r\n            int x = Integer.parseInt(in);\r\n            System.out.print(\"Feld Länge(y): \");\r\n            in = inRead.readLine();\r\n            int y = Integer.parseInt(in);\r\n            //System.out.println(x + \" \" + y);\r\n            Spiel dasSpiel=new Spiel(x,y);\r\n            dasSpiel.init();\r\n            printFeld(dasSpiel.getFeld(),true);\r\n            int size=3;\r\n            int count=1;\r\n            boolean shipAdded=false;\r\n            while(size>0){\r\n                System.out.println(\"Add ships cancel/stop with shipsize 0\");\r\n                System.out.print(\"Ship \"+count+\" size: \");\r\n                in=inRead.readLine();\r\n                size=Integer.parseInt(in);\r\n                if(size<1)\r\n                    break;\r\n                int horizontal=0;\r\n                shipAdded=false;\r\n                while (!shipAdded){\r\n                    System.out.print(\"Ship Player 1(0) x: \");\r\n                    in= inRead.readLine();\r\n                    x=Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 1(0) y: \");\r\n                    in= inRead.readLine();\r\n                    y=Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 1(0) horizontal(1 yes 0 no): \");\r\n                    in= inRead.readLine();\r\n                    horizontal=Integer.parseInt(in);\r\n                    shipAdded=dasSpiel.addShip(x,y,(horizontal>0)?true:false,size,0);\r\n                }\r\n                shipAdded=false;\r\n                while (!shipAdded){\r\n                    System.out.print(\"Ship Player 2(1) x: \");\r\n                    in= inRead.readLine();\r\n                    x=Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 2(1) y: \");\r\n                    in= inRead.readLine();\r\n                    y=Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 2(1) horizontal(1 yes 0 no): \");\r\n                    in= inRead.readLine();\r\n                    horizontal=Integer.parseInt(in);\r\n                    shipAdded=dasSpiel.addShip(x,y,(horizontal>0)?true:false,size,1);\r\n                }\r\n\r\n                count++;\r\n                printFeld(dasSpiel.getFeld(),true);\r\n            }\r\n            printFeld(dasSpiel.getFeld(),true);\r\n            dasSpiel.starteSpiel(1);\r\n            while (!dasSpiel.isOver()){\r\n                int spieler=dasSpiel.getAbschussSpieler();\r\n                System.out.println(\"Spieler \"+(spieler+1)+\" wird nun abgeschossen!\");\r\n                System.out.print(\"X Koordinate: \");\r\n                in=inRead.readLine();\r\n                x=Integer.parseInt(in);\r\n                System.out.print(\"Y Koordinate: \");\r\n                in=inRead.readLine();\r\n                y=Integer.parseInt(in);\r\n                dasSpiel.shoot(x,y,spieler);\r\n                printFeld(dasSpiel.getFeld(),true);\r\n                if(dasSpiel.istVersenkt())\r\n                    System.out.println(\"Treffer Versenkt!\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"IOEXCEPTION!\");\r\n        }\r\n    }\r\n\r\n    public static void remoteTestSpiel()  {\r\n        try {\r\n            BufferedReader inRead = new BufferedReader(new InputStreamReader(System.in));\r\n            System.out.print(\"Feld Breite(x): \");\r\n            String in = inRead.readLine();\r\n            int x = Integer.parseInt(in);\r\n            System.out.print(\"Feld Länge(y): \");\r\n            in = inRead.readLine();\r\n            int y = Integer.parseInt(in);\r\n            //System.out.println(x + \" \" + y);\r\n            Spiel dasSpiel=new Spiel(x,y,true);\r\n            dasSpiel.init();\r\n            printFeld(dasSpiel.getFeld(),true);\r\n            int size=3;\r\n            int count=1;\r\n            boolean shipAdded=false;\r\n            while(size>0){\r\n                System.out.println(\"Add ships cancel/stop with shipsize 0\");\r\n                System.out.print(\"Ship \"+count+\" size: \");\r\n                in=inRead.readLine();\r\n                size=Integer.parseInt(in);\r\n                if(size<1)\r\n                    break;\r\n                int horizontal=0;\r\n                shipAdded=false;\r\n                while (!shipAdded){\r\n                    System.out.print(\"Ship Player 1(0) x: \");\r\n                    in= inRead.readLine();\r\n                    x=Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 1(0) y: \");\r\n                    in= inRead.readLine();\r\n                    y=Integer.parseInt(in);\r\n                    System.out.print(\"Ship Player 1(0) horizontal(1 yes 0 no): \");\r\n                    in= inRead.readLine();\r\n                    horizontal=Integer.parseInt(in);\r\n                    shipAdded=dasSpiel.addShip(x,y,(horizontal>0)?true:false,size,0);\r\n                }\r\n\r\n\r\n                count++;\r\n                printFeld(dasSpiel.getFeld(),true);\r\n            }\r\n            printFeld(dasSpiel.getFeld(),true);\r\n            dasSpiel.starteSpiel();\r\n            while (!dasSpiel.isOver()){\r\n                int spieler=dasSpiel.getAbschussSpieler();\r\n                System.out.println(\"Spieler \"+(spieler+1)+\" wird nun abgeschossen!\");\r\n                System.out.print(\"X Koordinate: \");\r\n                in=inRead.readLine();\r\n                x=Integer.parseInt(in);\r\n                System.out.print(\"Y Koordinate: \");\r\n                in=inRead.readLine();\r\n                y=Integer.parseInt(in);\r\n                dasSpiel.shoot(x,y,spieler,(spieler==1&&x==0&&y==0)?1:0,(spieler==1&&x==0&&y==0)?true:false);\r\n                if(spieler==1&&x==0&&y==0)\r\n                    dasSpiel.setGameOver();\r\n                printFeld(dasSpiel.getFeld(),true);\r\n                if(dasSpiel.istVersenkt())\r\n                    System.out.println(\"Treffer Versenkt!\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"IOEXCEPTION!\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * gibt das Spielbrett aus\r\n     * @param f ein aus der Klasse Spiel einzufügendes Feld -> getFeld()\r\n     */\r\n    public static void printFeld(int[][][] f){\r\n        System.out.print(\"Spieler1: \");\r\n        for(int i=0;i<f[0].length*2-7;i++)\r\n            System.out.print(\" \");\r\n        System.out.print(\"   Spieler2:\\n\");\r\n        System.out.print(\"   \");\r\n        char buchstabe=65;\r\n        for(int x=0;x<f[0].length;x++){\r\n            if(x<10)\r\n                System.out.print(x+\" \");\r\n            else{\r\n                buchstabe=65;\r\n                buchstabe+=x-10;\r\n                System.out.print(buchstabe+\" \");\r\n            }\r\n        }\r\n        System.out.print(\"   \");\r\n        for(int x=0;x<f[0].length;x++){\r\n            if(x<10)\r\n                System.out.print(x+\" \");\r\n            else{\r\n                buchstabe=65;\r\n                buchstabe+=x-10;\r\n                System.out.print(buchstabe+\" \");\r\n            }\r\n        }\r\n        System.out.println(\"\\n\");\r\n        for(int y=0;y<f[0][0].length;y++){\r\n            buchstabe=97;\r\n            buchstabe+=y;\r\n            System.out.print(buchstabe+\"  \");\r\n            for(int s=0;s<f.length;s++){\r\n\r\n                for(int x=0;x<f[0].length;x++){\r\n                    System.out.print(f[s][x][y]+\" \");\r\n                }\r\n                if(s<f.length-1)\r\n                    System.out.print(\" | \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * gibt das Spielbrett aus\r\n     * @param f ein aus der Klasse Spiel einzufügendes Feld -> getFeld()\r\n     * @param hint true -> gibt Legende mit aus\r\n     */\r\n    public static void printFeld(int[][][] f,boolean hint){\r\n        printFeld(f);\r\n        if(hint)\r\n            System.out.println(\"0 -> frei, 1 -> Schiff, 2 -> Treffer, 3 -> Wasser\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/logic/logicOUTput.java	(revision 42f35fbc29d412e7cda060fa8a89492860c94a94)
+++ src/logic/logicOUTput.java	(date 1604851484234)
@@ -16,7 +16,7 @@
             System.out.print("Feld Länge(y): ");
             in = inRead.readLine();
             int y = Integer.parseInt(in);
-            //System.out.println(x + " " + y);
+            System.out.println(x + " " + y);
             Spiel dasSpiel = new Spiel(x, y, true);
             RDM_Bot rdm_bot=new RDM_Bot(x,y);
             dasSpiel.init();
